@using Todo.Controllers
@using Todo.Data.Entities
@using Todo.Services
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@{
    ViewData["Title"] = $"List: {Model.Title}";
    var itemNumber = 0;
}

<h2>@ViewData["Title"]</h2>

<div class="col-md-6">

    <div>
        @Html.HiddenFor(m => m.TodoListId)
        @Html.Label("order-by-dropdown", "Order by: ")
        @Html.DropDownList(
            "order-by-dropdown",
            new List<SelectListItem>
            {
                new SelectListItem { Text = "Importance", Value = "Importance", Selected = !Model.OrderByRank },
                new SelectListItem { Text = "Rank", Value = "Rank", Selected = Model.OrderByRank }
            })
    </div>

    @Html.Label("hide-completed-items-checkbox", " Hide completed items")
    @Html.CheckBox("hide-completed-items-checkbox")

    <ul id="todo-list" class="list-group">

        <li class="list-group-item">
            <a asp-action="Create" asp-controller="TodoItem" asp-route-todoListId="@Model.TodoListId">
                <strong>Add New Item</strong>
            </a>
        </li>

        @foreach (var item in Model.Items)
        {
            itemNumber++;

            string contextualClass;
            switch (item.Importance)
            {
                case Importance.High:
                    contextualClass = "list-group-item-danger";
                    break;
                case Importance.Low:
                    contextualClass = "list-group-item-info";
                    break;
                default:
                    contextualClass = "";
                    break;
            }

            string itemIsDoneClass = item.IsDone ? "is-done" : string.Empty;

            <li class="list-group-item @contextualClass @itemIsDoneClass">

                @Html.Hidden($"item-id-{item.TodoItemId}", item.TodoItemId)

                <div class="row">
                    <div class="col-md-8">
                        <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">
                            @if (item.IsDone)
                            {
                                <s>@item.Title</s>
                            }
                            else
                            {
                                <text>@item.Title</text>
                            }
                        </a>
                    </div>

                    <div class="col-md-4 text-right">
                        @{
                            var gravatarHash = Gravatar.GetHash(item.ResponsibleParty.Email);
                            var gravatarJsonEndpoint = $"{gravatarHash}.json";
                        }
                        <small>
                            @*
                                The label has empty text by default and the script to get the display name from the profile uses a callback so
                                if the Gravatar API call is slow then the label will just appear invisible until the callback is called
                            *@
                            <Label id="display-name-label-@itemNumber"></Label>
                            @item.ResponsibleParty.UserName
                            <img src="https://www.gravatar.com/avatar/@gravatarHash?s=30" />
                        </small>
                        <script type="text/javascript">
                        var setDisplayName = setDisplayNameCurried(@itemNumber);
                        </script>
                        <script src="https://www.gravatar.com/@gravatarJsonEndpoint?callback=setDisplayName" type="text/javascript"></script>
                    </div>
                </div>

            </li>
        }
    </ul>
</div>

<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script>
    var orderByRank = "@Model.OrderByRank".toLowerCase() === "true";
    if (orderByRank) {
        $("#todo-list").sortable({
            update: function () {
                var rank = 1;
                var newItemRanks = [];
                $('[id^="item-id"]').each(function () {
                    newItemRanks.push({ id: $(this).val(), rank });
                    rank++;
                });

                $.ajax({
                    url: '/TodoList/@Model.TodoListId',
                    method: 'POST',
                    dataType: 'json',
                    contentType: 'application/json',
                    data: JSON.stringify({ newItemRanks })
                })
            }
        });
    }
</script>
